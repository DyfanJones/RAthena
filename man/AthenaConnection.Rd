% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Connection.R, R/Result.R
\docType{class}
\name{AthenaConnection}
\alias{AthenaConnection}
\alias{AthenaConnection-class}
\alias{show,AthenaConnection-method}
\alias{dbDisconnect,AthenaConnection-method}
\alias{dbIsValid,AthenaConnection-method}
\alias{dbSendQuery,AthenaConnection,character-method}
\alias{dbSendStatement,AthenaConnection,character-method}
\alias{dbExecute,AthenaConnection,character-method}
\alias{dbDataType,AthenaConnection,ANY-method}
\alias{dbDataType,AthenaConnection,data.frame-method}
\alias{dbQuoteString,AthenaConnection,character-method}
\alias{dbQuoteIdentifier,AthenaConnection,SQL-method}
\alias{dbWriteTable,AthenaConnection,character,data.frame-method}
\alias{dbListTables,AthenaConnection-method}
\alias{dbListTables}
\alias{dbListFields,AthenaConnection,character-method}
\alias{dbListFields}
\alias{dbExistsTable,AthenaConnection,character-method}
\alias{dbRemoveTable,AthenaConnection,character-method}
\alias{dbGetQuery,AthenaConnection,character-method}
\alias{dbGetInfo,AthenaConnection-method}
\alias{dbGetPartition}
\alias{dbGetPartition,AthenaConnection-method}
\alias{dbIsValid,AthenaQuery-method}
\title{Athena Connection Methods}
\usage{
\S4method{show}{AthenaConnection}(object)

\S4method{dbDisconnect}{AthenaConnection}(conn, ...)

\S4method{dbIsValid}{AthenaConnection}(dbObj, ...)

\S4method{dbSendQuery}{AthenaConnection,character}(conn,
  statement = NULL, work_group = NULL, s3_staging_dir = NULL)

\S4method{dbSendStatement}{AthenaConnection,character}(conn,
  statement = NULL, work_group = NULL, s3_staging_dir = NULL)

\S4method{dbExecute}{AthenaConnection,character}(conn, statement = NULL,
  work_group = NULL, s3_staging_dir = NULL)

\S4method{dbDataType}{AthenaConnection,ANY}(dbObj, obj, ...)

\S4method{dbDataType}{AthenaConnection,data.frame}(dbObj, obj, ...)

\S4method{dbQuoteString}{AthenaConnection,character}(conn, x, ...)

\S4method{dbQuoteIdentifier}{AthenaConnection,SQL}(conn, x, ...)

\S4method{dbWriteTable}{AthenaConnection,character,data.frame}(conn, name,
  value, overwrite = FALSE, append = FALSE, row.names = NA,
  field.types = NULL, partition = NULL, s3.location,
  file.type = c("csv", "tsv", "parquet"), ...)

\S4method{dbListTables}{AthenaConnection}(conn, ...)

\S4method{dbListFields}{AthenaConnection,character}(conn, name, ...)

\S4method{dbExistsTable}{AthenaConnection,character}(conn, name, ...)

\S4method{dbRemoveTable}{AthenaConnection,character}(conn, name, ...)

\S4method{dbGetQuery}{AthenaConnection,character}(conn, statement = NULL,
  df_type1 = NULL, work_group = NULL, s3_staging_dir = NULL, ...)

\S4method{dbGetInfo}{AthenaConnection}(dbObj, ...)

dbGetPartition(conn, name, ...)

\S4method{dbGetPartition}{AthenaConnection}(conn, name, ...)

\S4method{dbIsValid}{AthenaQuery}(dbObj, ...)
}
\arguments{
\item{object}{Any R object}

\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[=dbConnect]{dbConnect()}}.}

\item{...}{Other parameters passed on to methods.}

\item{dbObj}{An object inheriting from \linkS4class{DBIObject},
i.e. \linkS4class{DBIDriver}, \linkS4class{DBIConnection},
or a \linkS4class{DBIResult}}

\item{statement}{a character string containing SQL.}

\item{obj}{An R object whose SQL type we want to determine.}

\item{x}{A character vector to quote as string.}

\item{name}{A character string specifying the unquoted DBMS table name,
or the result of a call to \code{\link[=dbQuoteIdentifier]{dbQuoteIdentifier()}}.}

\item{value}{a \link{data.frame} (or coercible to data.frame).}

\item{overwrite}{Allow overwriting the destination table. Cannot be
`TRUE` if `append` is also `TRUE`.}

\item{append}{Allow appending to the destination table. Cannot be
`TRUE` if `overwrite` is also `TRUE`.}
}
\description{
Implementations of pure virtual functions defined in the `DBI` package
for AthenaConnection objects.
}
